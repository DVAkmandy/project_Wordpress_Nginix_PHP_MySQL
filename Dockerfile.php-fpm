FROM localhost:5000/nanoninja/php-fpm:8.0

ENV php_conf /usr/local/etc/php-fpm.conf
ENV fpm_conf /usr/local/etc/php-fpm.d/www.conf
ENV php_vars /usr/local/etc/php/conf.d/docker-vars.ini

RUN apt-get update && \
    apt-get install -y nginx && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN apt-get update && \
    apt-get install -y \
    curl \
    wget \
    git \
    autoconf \
    gcc \
    g++ \
    make \
    libfreetype6-dev \
    libjpeg62-turbo-dev \
    libpng-dev \
    libonig-dev \
    libzip-dev \
    zip \
    unzip \
    supervisor \
    libmcrypt-dev && \
    pecl install mcrypt && \
    docker-php-ext-enable mcrypt && \
    docker-php-ext-install -j$(nproc) iconv mbstring mysqli pdo_mysql zip && \
    docker-php-ext-configure gd --with-freetype --with-jpeg && \
    docker-php-ext-install -j$(nproc) gd

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# certbot and additional dependencies
RUN apt-get update && \
    apt-get install -y \
    python3-pip \
    certbot \
    libffi-dev \
    libsqlite3-0 \
    libsqlite3-dev \
    sqlite3 \
    libpq-dev \
    lua5.3 \
    libwebp-dev \
    zlib1g-dev \
    libxpm-dev && \
    pecl install xdebug redis mongodb && \
    docker-php-ext-enable xdebug redis mongodb && \
    echo "extension=redis.so" > /usr/local/etc/php/conf.d/redis.ini && \
    echo "extension=mongodb.so" > /usr/local/etc/php/conf.d/mongodb.ini && \
    echo "zend_extension=xdebug" > /usr/local/etc/php/conf.d/xdebug.ini && \
    pip3 install --upgrade pip && \
    mkdir -p /etc/letsencrypt/webrootauth && \
    apt-get remove -y \
        gcc \
        make \
        autoconf && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

COPY conf/supervisord.conf /etc/supervisord.conf

# Copy our nginx config
RUN rm -f /etc/nginx/nginx.conf
COPY conf/nginx.conf /etc/nginx/nginx.conf

# Создание каталогов конфигурации Nginx и каталога для SSL-сертификатов
RUN mkdir -p /etc/nginx/sites-available/ && \
    mkdir -p /etc/nginx/sites-enabled/ && \
    mkdir -p /etc/nginx/ssl/ && \
    rm -Rf /var/www/* && \
    mkdir /var/www/html/

# Копирование конфигурационных файлов Nginx
COPY conf/nginx-site.conf /etc/nginx/sites-available/default.conf
COPY conf/nginx-site-ssl.conf /etc/nginx/sites-available/default-ssl.conf

# Создание символических ссылок для активации конфигураций сайтов
RUN ln -s /etc/nginx/sites-available/default.conf /etc/nginx/sites-enabled/default.conf

# Настройка параметров PHP-FPM
RUN echo "cgi.fix_pathinfo=0" > ${php_vars} && \
    echo "upload_max_filesize = 100M"  >> ${php_vars} && \
    echo "post_max_size = 100M"  >> ${php_vars} && \
    echo "variables_order = \"EGPCS\""  >> ${php_vars} && \
    echo "memory_limit = 128M"  >> ${php_vars} && \
    sed -i \
        -e "s/;catch_workers_output\s*=\s*yes/catch_workers_output = yes/g" \
        -e "s/pm.max_children = 5/pm.max_children = 2/g" \
        -e "s/pm.start_servers = 2/pm.start_servers = 1/g" \
        -e "s/pm.min_spare_servers = 1/pm.min_spare_servers = 1/g" \
        -e "s/pm.max_spare_servers = 3/pm.max_spare_servers = 2/g" \
        -e "s/;pm.max_requests = 500/pm.max_requests = 200/g" \
        -e "s/user = www-data/user = nginx/g" \
        -e "s/group = www-data/group = nginx/g" \
        -e "s/;listen.mode = 0660/listen.mode = 0666/g" \
        -e "s/;listen.owner = www-data/listen.owner = nginx/g" \
        -e "s/;listen.group = www-data/listen.group = nginx/g" \
        -e "s/listen = 127.0.0.1:9000/listen = \/var\/run\/php-fpm.sock/g" \
        -e "s/^;clear_env = no$/clear_env = no/" \
        ${fpm_conf}

RUN adduser --disabled-password --gecos "" --uid 121 nginx

COPY /scripts/start.sh /start.sh

RUN chmod +x /start.sh

COPY /etc/php.ini /etc/php/8.0/php.ini

RUN sed -i \
        -e "s/;opcache/opcache/g" \
        -e "s/;zend_extension=opcache/zend_extension=opcache/g" \
        /etc/php/8.0/php.ini

COPY src/ /var/www/html/

EXPOSE 443 80

WORKDIR "/var/www/html"

CMD ["/start.sh"]

